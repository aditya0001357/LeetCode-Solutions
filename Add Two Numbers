class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2)
    {   
        int sum, carry=0;
        
        ListNode *first, *aux, *root;
        root=NULL;
        
        while(l1->next!=NULL && l2->next!=NULL)
        {
            sum=l1->val+l2->val+carry;
            carry=sum/10;
            sum=sum%10;
            
            l1=l1->next;
            l2=l2->next;
            
            ListNode *temp=new ListNode(sum);
            
            if(root==NULL)
                first=root=temp;
            else
            {
                root->next=temp;
                root=temp;
            }
            
        }
        
        if(l1->next==NULL && l2->next!=NULL)
        {
            sum=l1->val+l2->val+carry;
            carry=sum/10;
            sum=sum%10;
            
            ListNode *temp=new ListNode(sum);
            
            if(root==NULL)
                first=root=temp;
            else
            {
                root->next=temp;
                root=temp;
            }
            
            l2=l2->next;
            aux=l2;
        }
        
        else if(l2->next==NULL && l1->next!=NULL)
        {
            sum=l1->val+l2->val+carry;
            carry=sum/10;
            sum=sum%10;
            
            ListNode *temp=new ListNode(sum);
            
            if(root==NULL)
                first=root=temp;
            else
            {
                root->next=temp;
                root=temp;
            }
            
            l1=l1->next;
            aux=l1;
        }
        else
        {
            sum=l1->val+l2->val+carry;
            carry=sum/10;
            sum=sum%10;
            
            ListNode *temp=new ListNode(sum);
            
            if(root==NULL)
                first=root=temp;
            else
            {
                root->next=temp;
                root=temp;
            }
            
            if(carry!=0)
            {
                ListNode *temp=new ListNode(1);
                if(root==NULL)
                    first=root=temp;
                else
                {
                    root->next=temp;
                    root=temp;
                }
            }
            return first;
        }
        
        while(aux->next!=NULL)
        {
            sum=aux->val+carry;
            carry=sum/10;
            sum=sum%10;
            
            ListNode *temp=new ListNode(sum);
            
            if(root==NULL)
                first=root=temp;
            else
            {
                root->next=temp;
                root=temp;
            }
            
            aux=aux->next;
        }
        sum=aux->val+carry;
        carry=sum/10;
        sum=sum%10;

        ListNode *temp=new ListNode(sum);

        if(root==NULL)
            first=root=temp;
        else
        {
            root->next=temp;
            root=temp;
        }
        
        if(carry!=0)
        {
            ListNode *temp=new ListNode(1);
            if(root==NULL)
                first=root=temp;
            else
            {
                root->next=temp;
                root=temp;
            }
        }
            
        return first;
        
    }            
};  
